From 9f720e994623d882790f76b4476da61b26464217 Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@qt.io>
Date: Tue, 15 Oct 2019 10:31:22 +0200
Subject: [PATCH] [Backport] CVE-2019-13664
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

[m77-attempt#2] Use navigation initiator for calculating the `Origin` header's value.

Before this CL, AddAdditionalRequestHeaders would set the Origin header
to either the destination origin (for main frame navigations) or to the
main frame's origin (for subframe navigations).  Both of these are wrong
and don't match Blink behavior (which correctly uses the initiator of
the navigation to calculate the Origin header's value).

Tbr: avi@chromium.org, nasko@chromium.org, lukasza@chromium.org, zhongyi@chromium.org
Bug: 915538
Change-Id: I3e15b218b159ec86d47d1e5d8628d32653f4b483
Cr-Original-Original-Commit-Position: refs/heads/master@{#689562}
Reviewed-by: Łukasz Anforowicz <lukasza@chromium.org>
Cr-Commit-Position: refs/branch-heads/3865@{#632}
Cr-Branched-From: 0cdcc6158160790658d1f033d3db873603250124-refs/heads/master@{#681094}
Reviewed-by: Michal Klocek <michal.klocek@qt.io>
Reviewed-by: Michael Brüning <michael.bruning@qt.io>
---
 .../browser/frame_host/navigation_request.cc  | 34 ++++++++-----------
 chromium/content/public/common/referrer.cc    | 10 ++++++
 chromium/content/public/common/referrer.h     | 12 +++++++
 .../embedded_test_server/default_handlers.cc  |  2 +-
 4 files changed, 38 insertions(+), 20 deletions(-)

diff --git a/src/3rdparty/chromium/content/browser/frame_host/navigation_request.cc b/src/3rdparty/chromium/content/browser/frame_host/navigation_request.cc
index fbee81d5070..d35361b9ea7 100644
--- a/src/3rdparty/chromium/content/browser/frame_host/navigation_request.cc
+++ b/src/3rdparty/chromium/content/browser/frame_host/navigation_request.cc
@@ -135,9 +135,13 @@ bool IsSecMetadataEnabled() {
 // This should match blink::ResourceRequest::needsHTTPOrigin.
 bool NeedsHTTPOrigin(net::HttpRequestHeaders* headers,
                      const std::string& method) {
-  // Don't add an Origin header if it is already present.
-  if (headers->HasHeader(net::HttpRequestHeaders::kOrigin))
-    return false;
+  // Blink version of this function checks if the Origin header might have
+  // already been added to |headers|.  This check is not replicated below
+  // because:
+  // 1. We want to overwrite the old (renderer-provided) header value
+  //    with a new, trustworthy (browser-provided) value.
+  // 2. The rest of the function matches the Blink version, so there should
+  //    be no discrepancies in the Origin value used.
 
   // Don't send an Origin header for GET or HEAD to avoid privacy issues.
   // For example, if an intranet page has a hyperlink to an external web
@@ -165,6 +169,7 @@ void AddAdditionalRequestHeaders(
     const std::string user_agent_override,
     bool has_user_gesture,
     base::Optional<url::Origin> initiator_origin,
+    blink::WebReferrerPolicy referrer_policy,
     FrameTreeNode* frame_tree_node) {
   if (!url.SchemeIsHTTPOrHTTPS())
     return;
@@ -228,23 +233,13 @@ void AddAdditionalRequestHeaders(
   }
 
   // Next, set the HTTP Origin if needed.
-  if (!NeedsHTTPOrigin(headers, method))
-    return;
-
-  // Create a unique origin.
-  url::Origin origin;
-  if (frame_tree_node->IsMainFrame()) {
-    // For main frame, the origin is the url currently loading.
-    origin = url::Origin::Create(url);
-  } else if ((frame_tree_node->active_sandbox_flags() &
-              blink::WebSandboxFlags::kOrigin) ==
-             blink::WebSandboxFlags::kNone) {
-    // The origin should be the origin of the root, except for sandboxed
-    // frames which have a unique origin.
-    origin = frame_tree_node->frame_tree()->root()->current_origin();
+  if (NeedsHTTPOrigin(headers, method)) {
+    url::Origin origin_header_value = initiator_origin.value_or(url::Origin());
+    origin_header_value = Referrer::SanitizeOriginForRequest(
+        url, origin_header_value, referrer_policy);
+    headers->SetHeader(net::HttpRequestHeaders::kOrigin,
+                       origin_header_value.Serialize());
   }
-
-  headers->SetHeader(net::HttpRequestHeaders::kOrigin, origin.Serialize());
 }
 
 // Should match the definition of
@@ -468,6 +463,7 @@ NavigationRequest::NavigationRequest(
       frame_tree_node_->navigator()->GetController()->GetBrowserContext(),
       common_params.method, user_agent_override,
       common_params_.has_user_gesture, begin_params_->initiator_origin,
+      common_params_.referrer.policy,
       frame_tree_node);
 
   if (begin_params_->is_form_submission) {
diff --git a/src/3rdparty/chromium/content/public/common/referrer.cc b/src/3rdparty/chromium/content/public/common/referrer.cc
index a9e5c4b6146..7adf5f7d8b3 100644
--- a/src/3rdparty/chromium/content/public/common/referrer.cc
+++ b/src/3rdparty/chromium/content/public/common/referrer.cc
@@ -84,6 +84,16 @@ Referrer Referrer::SanitizeForRequest(const GURL& request,
   return sanitized_referrer;
 }
 
+// static
+url::Origin Referrer::SanitizeOriginForRequest(
+    const GURL& request,
+    const url::Origin& initiator,
+    blink::WebReferrerPolicy policy) {
+  Referrer fake_referrer(initiator.GetURL(), policy);
+  Referrer sanitizied_referrer = SanitizeForRequest(request, fake_referrer);
+  return url::Origin::Create(sanitizied_referrer.url);
+}
+
 // static
 void Referrer::SetReferrerForRequest(net::URLRequest* request,
                                      const Referrer& referrer) {
diff --git a/src/3rdparty/chromium/content/public/common/referrer.h b/src/3rdparty/chromium/content/public/common/referrer.h
index c3199ca5b13..f60e2692753 100644
--- a/src/3rdparty/chromium/content/public/common/referrer.h
+++ b/src/3rdparty/chromium/content/public/common/referrer.h
@@ -29,6 +29,18 @@ struct CONTENT_EXPORT Referrer {
   static Referrer SanitizeForRequest(const GURL& request,
                                      const Referrer& referrer);
 
+  // Returns |initiator| origin sanitized by |policy| so that it can be used
+  // when requesting |request| URL.
+  //
+  // Note that the URL-based sanitization (e.g. SanitizeForRequest above) cannot
+  // be used for cases where the referrer URL is missing (e.g. about:blank) but
+  // the initiator origin still needs to be used (e.g. when calculating the
+  // value of the `Origin` header to use in a POST request).
+  static url::Origin SanitizeOriginForRequest(
+      const GURL& request,
+      const url::Origin& initiator,
+      blink::WebReferrerPolicy policy);
+
   static void SetReferrerForRequest(net::URLRequest* request,
                                     const Referrer& referrer);
 
diff --git a/src/3rdparty/chromium/net/test/embedded_test_server/default_handlers.cc b/src/3rdparty/chromium/net/test/embedded_test_server/default_handlers.cc
index 9a86da5d233..655c208a211 100644
--- a/src/3rdparty/chromium/net/test/embedded_test_server/default_handlers.cc
+++ b/src/3rdparty/chromium/net/test/embedded_test_server/default_handlers.cc
@@ -160,7 +160,7 @@ std::unique_ptr<HttpResponse> HandleEchoAll(const HttpRequest& request) {
 
   body +=
       "</pre>"
-      "<h1>Request Headers:</h1><pre>" +
+      "<h1>Request Headers:</h1><pre id='request-headers'>" +
       request.all_headers + "</pre>" +
       "<h1>Response nonce:</h1><pre id='response-nonce'>" +
       base::UnguessableToken::Create().ToString() + "</pre></body></html>";
-- 
2.24.0

